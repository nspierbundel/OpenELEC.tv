From c5a16bedd5439c7efe31afaa793a07419fe59f9e Mon Sep 17 00:00:00 2001
From: j1nx <p.steenbergen@j1nx.nl>
Date: Sat, 10 May 2014 21:49:46 +0200
Subject: [PATCH] Fix nynxboard related hardware based remote key bounche

Signed-off-by: j1nx <p.steenbergen@j1nx.nl>
---
 xbmc/input/linux/LinuxInputDevices.cpp | 43 ++++++++++++++++++++++++++++++----
 1 file changed, 38 insertions(+), 5 deletions(-)

diff --git a/xbmc/input/linux/LinuxInputDevices.cpp b/xbmc/input/linux/LinuxInputDevices.cpp
index ee21474..4cff785 100644
--- a/xbmc/input/linux/LinuxInputDevices.cpp
+++ b/xbmc/input/linux/LinuxInputDevices.cpp
@@ -96,6 +96,7 @@ typedef unsigned long kernel_ulong_t;
 #include "LinuxInputDevices.h"
 #include "input/MouseStat.h"
 #include "utils/log.h"
+#include "settings/AdvancedSettings.h"
 
 #ifndef BITS_PER_LONG
 #define BITS_PER_LONG        (sizeof(long) * 8)
@@ -250,10 +251,19 @@ KeyMap keyMap[] = {
   { KEY_PRINT         , XBMCK_PRINT       },
   { KEY_QUESTION      , XBMCK_HELP        },
   // The Little Black Box Remote Additions
-  { 384               , XBMCK_LEFT        }, // Red
-  { 378               , XBMCK_RIGHT       }, // Green
-  { 381               , XBMCK_UP          }, // Yellow
-  { 366               , XBMCK_DOWN        }, // Blue
+  { 384		      , XBMCK_RED	  },
+  { 378               , XBMCK_GREEN       },
+  { 381               , XBMCK_YELLOW      },
+  { 366               , XBMCK_BLUE        },
+  { 419               , XBMCK_FASTFORWARD },
+  { 418               , XBMCK_MENU        },
+  { 150               , XBMCK_MUSIC       },
+  { 442               , XBMCK_MOVIES      },
+  { 376               , XBMCK_SERIES      },
+  { 159               , XBMCK_MEDIA_PLAY_PAUSE},
+  { 362               , XBMCK_SETTINGS	  },
+  { 142		      , XBMCK_POWER       }, 
+  { 364               , XBMCK_FAVORITES   }, 
 };
 
 typedef enum
@@ -681,11 +690,22 @@ void CLinuxInputDevice::SetLed(int led, int state)
  * Input thread reading from device.
  * Generates events on incoming data.
  */
+
+long long int deltatime_usec(struct timeval ctime, struct timeval otime)
+{
+	long long delta = 0;
+	delta = (ctime.tv_sec - otime.tv_sec) * 1000000;
+	delta += (ctime.tv_usec - otime.tv_usec);
+	return delta;
+}
+
 XBMC_Event CLinuxInputDevice::ReadEvent()
 {
   int readlen;
   struct input_event levt;
 
+  static struct input_event levt_old;
+
   XBMC_Event devt;
 
   while (1)
@@ -719,7 +739,20 @@ XBMC_Event CLinuxInputDevice::ReadEvent()
       printf("CLinuxInputDevice: read error : %s\n", strerror(errno));
       break;
     }
-
+	if ((levt.type == EV_KEY) && (levt.value == 1)) {
+    		// Check same key is pressed.
+    		if (levt.code == levt_old.code) {
+        		// Check the time difference of the events.
+        		if ( deltatime_usec(levt.time, levt_old.time) < ((long long)g_advancedSettings.m_usbhidrepeatdelay * 1000)) {
+            			// store the latest key event.
+            			levt_old = levt;
+            			// Jump back to the top of the while loop.
+            			continue;
+        		}				
+    		}			
+    		// store the latest key event.
+    		levt_old = levt;
+	}
     if (!TranslateEvent(levt, devt))
       continue;
 
-- 
1.9.1

